// Generated by CoffeeScript 1.10.0
var GamePlay;

GamePlay = (function() {
  var Joueur;

  GamePlay.prototype.moteur = null;

  Joueur = (function() {
    function Joueur() {}

    Joueur.prototype.spriteMoto = null;

    Joueur.prototype.lastWall = null;

    Joueur.prototype.lastWallPosition = null;

    Joueur.prototype.bmd = null;

    Joueur.prototype.color = '#ff0000';

    return Joueur;

  })();

  GamePlay.prototype.joueur1 = Joueur;

  GamePlay.prototype.joueur2 = Joueur;

  GamePlay.prototype.joueur3 = Joueur;

  GamePlay.prototype.joueur4 = Joueur;

  GamePlay.prototype.spriteG = null;

  GamePlay.prototype.spriteD = null;

  GamePlay.prototype.globalVelocity = 100;

  GamePlay.prototype.epaisseurMur = 10;

  GamePlay.prototype.prolongerMur = function(joueur) {
    if (joueur.lastWall) {
      if (joueur.spriteMoto.body.velocity.x > 0) {
        joueur.lastWall.width = joueur.spriteMoto.x - joueur.lastWallPosition;
        return console.log(joueur.lastWall.width);
      } else if (joueur.spriteMoto.body.velocity.x < 0) {
        return joueur.lastWall.width = joueur.lastWallPosition - (joueur.spriteMoto.x + joueur.spriteMoto.width);
      } else if (joueur.spriteMoto.body.velocity.y > 0) {
        return joueur.lastWall.height = joueur.spriteMoto.y - joueur.lastWall.y;
      } else if (joueur.spriteMoto.body.velocity.y < 0) {
        return joueur.lastWall.height = joueur.lastWallPosition - (joueur.spriteMoto.y + joueur.lastWall.y);
      }
    }
  };

  GamePlay.prototype.moveUp = function(joueur, bmd) {
    joueur.spriteMoto.body.velocity.y = -this.globalVelocity;
    joueur.spriteMoto.body.velocity.x = 0;
    bmd.ctx.rect(0, 0, this.epaisseurMur, 5);
    bmd.ctx.fill();
    joueur.lastWall = game.add.sprite(joueur.spriteMoto.x + joueur.spriteMoto.width / 2, joueur.spriteMoto.y + joueur.spriteMoto.height, bmd);
    game.physics.arcade.enable([joueur.lastWall]);
    joueur.lastWall.body.velocity.y = -this.globalVelocity;
    return joueur.lastWallPosition = joueur.spriteMoto.y + joueur.spriteMoto.height;
  };

  GamePlay.prototype.moveDown = function(joueur, bmd) {
    joueur.spriteMoto.body.velocity.y = this.globalVelocity;
    joueur.spriteMoto.body.velocity.x = 0;
    bmd.ctx.rect(0, 0, this.epaisseurMur, 5);
    bmd.ctx.fill();
    joueur.lastWall = game.add.sprite(joueur.spriteMoto.x + joueur.spriteMoto.width / 2, joueur.spriteMoto.y, bmd);
    return joueur.lastWallPosition = joueur.spriteMoto.y;
  };

  GamePlay.prototype.moveLeft = function(joueur, bmd) {
    joueur.spriteMoto.body.velocity.x = -this.globalVelocity;
    joueur.spriteMoto.body.velocity.y = 0;
    bmd.ctx.rect(0, 0, 5, this.epaisseurMur);
    bmd.ctx.fill();
    joueur.lastWall = game.add.sprite(joueur.spriteMoto.x + joueur.spriteMoto.width, joueur.spriteMoto.y + joueur.spriteMoto.width / 2, bmd);
    game.physics.arcade.enable([joueur.lastWall]);
    joueur.lastWall.body.velocity.x = -this.globalVelocity;
    return joueur.lastWallPosition = joueur.spriteMoto.x + joueur.spriteMoto.width;
  };

  GamePlay.prototype.moveRight = function(joueur, bmd) {
    joueur.spriteMoto.body.velocity.x = this.globalVelocity;
    joueur.spriteMoto.body.velocity.y = 0;
    bmd.ctx.rect(0, 0, 5, this.epaisseurMur);
    bmd.ctx.fill();
    joueur.lastWall = game.add.sprite(joueur.spriteMoto.x, joueur.spriteMoto.y + joueur.spriteMoto.width / 2, bmd);
    return joueur.lastWallPosition = joueur.spriteMoto.x;
  };

  GamePlay.prototype.tourneDroite = function(joueur, bmd) {
    if (joueur.spriteMoto.body.velocity.x > 0) {
      this.moveDown(joueur, bmd);
    } else if (joueur.spriteMoto.body.velocity.x < 0) {
      this.moveUp(joueur, bmd);
    } else if (joueur.spriteMoto.body.velocity.y > 0) {
      this.moveLeft(joueur, bmd);
    } else if (joueur.spriteMoto.body.velocity.y < 0) {
      this.moveRight(joueur, bmd);
    }
    if (debug) {
      return console.log('tourne droite');
    }
  };

  GamePlay.prototype.tourneGauche = function(joueur, bmd) {
    if (joueur.spriteMoto.body.velocity.x > 0) {
      this.moveUp(joueur, bmd);
    } else if (joueur.spriteMoto.body.velocity.x < 0) {
      this.moveDown(joueur, bmd);
    } else if (joueur.spriteMoto.body.velocity.y > 0) {
      this.moveRight(joueur, bmd);
    } else if (joueur.spriteMoto.body.velocity.y < 0) {
      this.moveLeft(joueur, bmd);
    }
    if (debug) {
      return console.log('tourne gauche');
    }
  };

  GamePlay.prototype.tourne = function(joueur, direction) {
    if (joueur.lastWall && joueur.lastWall.body) {
      joueur.lastWall.body.moves = false;
    }
    joueur.bmd = game.add.bitmapData();
    joueur.bmd.ctx.beginPath();
    joueur.bmd.ctx.fillStyle = '#ff0000';
    if (direction === "droite") {
      return this.tourneDroite(joueur, joueur.bmd);
    } else if (direction === "gauche") {
      return this.tourneGauche(joueur, joueur.bmd);
    }
  };

  function GamePlay(game1) {
    this.game = game1;
    if (debug) {
      console.log('GamePlay::construct()');
    }
  }

  GamePlay.prototype.preload = function() {
    if (debug) {
      console.log('GamePlay::preload()');
    }
    game.load.image('fleche_gauche', 'assets/fleche_gauche.png');
    game.load.image('fleche_droite', 'assets/fleche_droite.png');
    game.load.image('moto1', 'assets/bike.png');
    game.load.image('moto2', 'assets/bike.png');
    game.load.image('moto3', 'assets/bike.png');
    return game.load.image('moto4', 'assets/bike.png');
  };

  GamePlay.prototype.create = function() {
    if (debug) {
      console.log('GamePlay::create()');
    }
    game.time.advancedTiming = true;
    game.stage.smoothed = false;
    this.joueur1.spriteMoto = game.add.sprite(50, 50, 'moto1');
    game.physics.arcade.enable([this.joueur1.spriteMoto]);
    this.joueur1.spriteMoto.body.velocity.y = this.globalVelocity;
    this.tourne(this.joueur1, "gauche");
    this.spriteG = game.add.sprite(0, 0, 'fleche_gauche');
    this.spriteG.scale.setTo(0.2, 0.2);
    this.spriteD = game.add.sprite(50, 0, 'fleche_droite');
    this.spriteD.scale.setTo(0.2, 0.2);
    this.spriteG.inputEnabled = true;
    this.spriteG.events.onInputDown.add(this.listenerBoutonG, this);
    this.spriteD.inputEnabled = true;
    return this.spriteD.events.onInputDown.add(this.listenerBoutonD, this);
  };

  GamePlay.prototype.listenerBoutonG = function() {
    if (debug) {
      console.log("bonton gauche");
    }
    return this.tourne(this.joueur1, "gauche");
  };

  GamePlay.prototype.listenerBoutonD = function() {
    if (debug) {
      console.log("bonton droit");
    }
    return this.tourne(this.joueur1, "droite");
  };

  GamePlay.prototype.update = function() {
    if (debug) {
      console.log('GamePlay::update()');
    }
    return this.prolongerMur(this.joueur1);
  };

  return GamePlay;

})();

//# sourceMappingURL=GamePlay.js.map
